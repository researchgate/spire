name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: 14

jobs:
  quality:
    name: Quality checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [12, 14, 16]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node }}

    - name: Cache node_modules
      uses: actions/cache@v2
      id: cache-nodemodules
      with:
        path: node_modules
        key: ${{ runner.os }}-${{ matrix.node }}-nodemodules-${{ hashFiles('**/yarn.lock') }}

    - name: Install dependencies
      if: steps.cache-nodemodules.outputs.cache-hit != 'true'
      run: yarn install --frozen-lockfile --non-interactive
    
    - name: Lint
      run: yarn lint

    - name: Unit tests
      run: yarn test --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        files: ./coverage/coverage-final.json
        fail_ci_if_error: true

  release:
    needs: [quality]
    if: github.ref == 'refs/heads/main'
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node_modules
        uses: actions/cache@v2
        id: cache-nodemodules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-nodemodules-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --non-interactive

      - name: Git Identity
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Verify npm access
        run:  | 
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          npm whoami #uses .npmrc from root and the env var
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        
      - name: Release
        run: yarn release --yes --no-verify-access
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
